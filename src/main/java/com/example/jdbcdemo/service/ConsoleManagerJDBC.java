package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Console;

public class ConsoleManagerJDBC implements ConsoleManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableConsole = "CREATE TABLE Console(id_console int GENERATED BY DEFAULT AS IDENTITY, name varchar(20), brand varchar(20), premiere int, price decimal(6,2))";

	private PreparedStatement addAllConsoles;		//CREATE
	private PreparedStatement getAllConsoles;		//READ
	private PreparedStatement updateConsole;		//UPDATE
	private PreparedStatement deleteAllConsoles;	//DELETE
	private PreparedStatement searchConsoles;		//SEARCH


	private Statement statement;

	public ConsoleManagerJDBC(){
		try{
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet resultSet = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;

			while(resultSet.next()){
				if("Console".equalsIgnoreCase(resultSet.getString("TABLE_NAME"))){
					tableExists = true;
					break;
				}
			}

			if(!tableExists){
				statement.executeUpdate(createTableConsole);
			}

			addAllConsoles = connection.prepareStatement("INSERT INTO Console (name, brand, premiere, price) VALUES (?, ?, ?, ?)");
			getAllConsoles = connection.prepareStatement("SELECT * FROM Console");
			updateConsole = connection.prepareStatement("UPDATE Console SET name=?, brand=?, premiere=?, price=? WHERE id_console=?");
			deleteAllConsoles = connection.prepareStatement("DELETE FROM Console");
			searchConsoles = connection.prepareStatement("SELECT * FROM Console WHERE name LIKE ?");
		}
		catch(SQLException exception){
			exception.printStackTrace();
		}
	}

	// GET CONNECTION
	Connection getConnection(){
		return connection;
	}

	// ADD CONSOLES
	public int addConsole(Console console){
		int count = 0;

		try{
			addAllConsoles.setString(1, console.getName());
			addAllConsoles.setString(2, console.getBrand());
			addAllConsoles.setInt(3, console.getPremiere());
			addAllConsoles.setDouble(4, console.getPrice());

			count = addAllConsoles.executeUpdate();
		}
		catch(SQLException exception){
			exception.printStackTrace();
		}

		return count;
	}

	// ADD ALL CONSOLES
	public void addAllConsoles(List<Console> consoles){
		try{
			connection.setAutoCommit(false);

			for(Console console : consoles){
				addAllConsoles.setString(1, console.getName());
				addAllConsoles.setString(2, console.getBrand());
				addAllConsoles.setInt(3, console.getPremiere());
				addAllConsoles.setDouble(4, console.getPrice());
				addAllConsoles.executeUpdate();
			}
			connection.commit();
		}
		catch(SQLException exception){
			try{
				connection.rollback();
			}
			catch(SQLException alarm){
				alarm.printStackTrace();
			}
		}
	}

	// GET ALL CONSOLES
	public List<Console> getAllConsoles(){
		List<Console> consoles = new ArrayList<Console>();

		try{
			ResultSet resultSet = getAllConsoles.executeQuery();

			while(resultSet.next()){
				Console console = new Console();
				console.setId(resultSet.getInt("id_console"));
				console.setName(resultSet.getString("name"));
				console.setBrand(resultSet.getString("brand"));
				console.setPremiere(resultSet.getInt("premiere"));
				console.setPrice(resultSet.getDouble("price"));
				consoles.add(console);
			}
		}
		catch(SQLException exception){
			exception.printStackTrace();
		}
		return consoles;
	}

	// UPDATE CONSOLE
	public int updateConsole(Console console){
		int count = 0;

		try{
			updateConsole.setString(1, console.getName());
			updateConsole.setString(2, console.getBrand());
			updateConsole.setInt(3, console.getPremiere());
			updateConsole.setDouble(4, console.getPrice());
			updateConsole.setInt(5, console.getId());

			count = updateConsole.executeUpdate();

		}
		catch(SQLException exception){
			exception.printStackTrace();
		}

		return count;
	}

	// DELETE CONSOLES
	void deleteConsoles(){

		try{
			deleteAllConsoles.executeUpdate();

		}
		catch(SQLException exception){
			exception.printStackTrace();
		}

	}

	// SELECT CONSOLE
	public List<Console> searchConsoles(String parameter, String value){
		List<Console> consoles = new ArrayList<Console>();

		try{
			searchConsoles.setString(1, "%"+value+"%");

			ResultSet resultSet = searchConsoles.executeQuery();

			while(resultSet.next()){
				Console console = new Console();
				console.setId(resultSet.getInt("id_console"));
				console.setName(resultSet.getString("name"));
				console.setBrand(resultSet.getString("brand"));
				console.setPremiere(resultSet.getInt("premiere"));
				console.setPrice(resultSet.getDouble("price"));
				consoles.add(console);
			}
		}
		catch(SQLException exception){
			exception.printStackTrace();
		}
		return consoles;
	}
}